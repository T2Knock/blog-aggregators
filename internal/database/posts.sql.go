// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (
    post_id, title, description, url, feed_id, published_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type CreatePostParams struct {
	PostID      string
	Title       sql.NullString
	Description sql.NullString
	Url         string
	FeedID      string
	PublishedAt sql.NullTime
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.PostID,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.FeedID,
		arg.PublishedAt,
	)
	return err
}

const getPostByURL = `-- name: GetPostByURL :one
SELECT post_id FROM posts
WHERE url = $1
`

func (q *Queries) GetPostByURL(ctx context.Context, url string) (string, error) {
	row := q.db.QueryRowContext(ctx, getPostByURL, url)
	var post_id string
	err := row.Scan(&post_id)
	return post_id, err
}

const getPostForUser = `-- name: GetPostForUser :many
SELECT
    post_id,
    title,
    description,
    published_at,
    posts.url AS post_url,
    feeds.name AS feed_name
FROM posts
INNER JOIN feeds ON posts.feed_id = feeds.feed_id
WHERE posts.feed_id = ANY($1::varchar [])
ORDER BY published_at DESC
LIMIT $2
`

type GetPostForUserParams struct {
	Column1 []string
	Limit   int32
}

type GetPostForUserRow struct {
	PostID      string
	Title       sql.NullString
	Description sql.NullString
	PublishedAt sql.NullTime
	PostUrl     string
	FeedName    string
}

func (q *Queries) GetPostForUser(ctx context.Context, arg GetPostForUserParams) ([]GetPostForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostForUser, pq.Array(arg.Column1), arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostForUserRow
	for rows.Next() {
		var i GetPostForUserRow
		if err := rows.Scan(
			&i.PostID,
			&i.Title,
			&i.Description,
			&i.PublishedAt,
			&i.PostUrl,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
