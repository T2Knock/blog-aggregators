// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"
)

const createFeedFollows = `-- name: CreateFeedFollows :one
WITH inserted_feed_follow AS (
    INSERT INTO feed_follows (
        feed_follow_id, feed_id, follower_id
    ) VALUES ($1, $2, $3) RETURNING feed_follow_id, feed_id, follower_id, created_at, updated_at
)

SELECT inserted_feed_follow.feed_follow_id, inserted_feed_follow.feed_id, inserted_feed_follow.follower_id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at
FROM inserted_feed_follow
`

type CreateFeedFollowsParams struct {
	FeedFollowID string
	FeedID       string
	FollowerID   string
}

type CreateFeedFollowsRow struct {
	FeedFollowID string
	FeedID       string
	FollowerID   string
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateFeedFollows(ctx context.Context, arg CreateFeedFollowsParams) (CreateFeedFollowsRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollows, arg.FeedFollowID, arg.FeedID, arg.FollowerID)
	var i CreateFeedFollowsRow
	err := row.Scan(
		&i.FeedFollowID,
		&i.FeedID,
		&i.FollowerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
